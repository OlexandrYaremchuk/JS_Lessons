[{"/Users/macbook/Documents/Java Script/JS_Lessons/src/index.js":"1","/Users/macbook/Documents/Java Script/JS_Lessons/src/App.js":"2","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/ListData.js":"3","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Navbar/Navbar.jsx":"4","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/M1L2.jsx":"5","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/GitHub.jsx":"6","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/M1L1.jsx":"7","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Header/Header.jsx":"8"},{"size":302,"mtime":1675270546355,"results":"9","hashOfConfig":"10"},{"size":990,"mtime":1675546441586,"results":"11","hashOfConfig":"10"},{"size":1938,"mtime":1675270546321,"results":"12","hashOfConfig":"10"},{"size":2762,"mtime":1675270546322,"results":"13","hashOfConfig":"10"},{"size":136,"mtime":1675270546321,"results":"14","hashOfConfig":"10"},{"size":300,"mtime":1675270546320,"results":"15","hashOfConfig":"10"},{"size":80782,"mtime":1675271851470,"results":"16","hashOfConfig":"10"},{"size":260,"mtime":1675270546319,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"1jvf9ve",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Documents/Java Script/JS_Lessons/src/index.js",["47"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport listData from './Components/ListData';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>\n);\n\n","/Users/macbook/Documents/Java Script/JS_Lessons/src/App.js",["48","49","50","51","52"],[],"import \"./App.css\";\nimport \"animate.css\";\nimport React, { Component } from \"react\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  NavLink,\n  Link,\n  Router,\n  HashRouter,\n} from \"react-router-dom\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Header from \"./Components/Header/Header\";\nimport M1L1 from \"./Components/Lessons/M1L1\";\nimport M1L2 from \"./Components/Lessons/M1L2\";\nimport GitHub from \"./Components/Lessons/GitHub\";\n\nfunction App(props) {\n  return (\n    <HashRouter>\n      <div className=\"App\">\n        <Header />\n        <div className=\"Main\">\n          <div className=\"navbarBox\">\n            <Navbar />\n          </div>\n\n          <div className=\"mainTextBox\">\n            <Routes>\n              <Route path=\"GitHub\" element={<GitHub />} />\n              <Route path=\"M1L1\" element={<M1L1 />} />\n              <Route path=\"M1L2\" element={<M1L2 />} />\n            </Routes>\n          </div>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/ListData.js",[],[],"/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Navbar/Navbar.jsx",["53","54","55"],[],"import ReactDOM from 'react-dom';\nimport React, { useState, useEffect } from 'react';\nimport s from './Navbar.module.css'\nimport { Link } from 'react-router-dom';\nimport Scrollspy from 'react-scrollspy'\n\nconst Navbar = () => {\n\n\n\n    return (\n        <div className={s.navbar}>\n            <ul className={s.navbarList}>\n                <Scrollspy items={[]}>\n                    <Link to='/GitHub'>\n                        <li id='GitHub'>Основи Git та GitHub</li>\n                    </Link>\n                    <Link to='/M1L1'>\n                        <li id='M1L1'>Модуль 1 - Заняття 1 - Змінні та типи</li>\n                    </Link>\n                    <Link to='/M1L2'>\n                        <li id='M1L2'>Модуль 1 - Заняття 2 - Розгалуження та цикли</li>\n                    </Link>\n                    <li>Модуль 2 - Заняття 3 - Масиви</li>\n                    <li>Модуль 2 - Заняття 4 - Функції</li>\n                    <li>Модуль 3 - Заняття 5 - Об'єкти</li>\n                    <li>Модуль 3 - Заняття 6 - Деструктуризація</li>\n                    <li>Модуль 4 - Заняття 7 - CallBack та стрілочні функції</li>\n                    <li>Модуль 4 - Заняття 8 - Перебираючі методи масиву</li>\n                    <li>Модуль 5 - Заняття 9 - Ключове слово this</li>\n                    <li>Модуль 5 - Заняття 10 - Прототипи та класи </li>\n                    <li>Модуль 6 - Заняття 11 - DOM</li>\n                    <li>Модуль 6 - Заняття 12 - Події</li>\n                    <li>Модуль 7 - Заняття 13 - Делегування подій</li>\n                    <li>Модуль 7 - Заняття 14 - throttle/debounce и lazyload </li>\n                    <li>Модуль 8 - Заняття 15 - Модульність коду</li>\n                    <li>Модуль 8 - Заняття 16 - Веб - сховище</li>\n                    <li>Модуль 9 - Заняття 17 - Таймери та час</li>\n                    <li>Модуль 9 - Заняття 18 - Проміси</li>\n                    <li>Модуль 10 - Заняття 19 - HTTP-запити</li>\n                    <li>Модуль 10 - Заняття 20 - Пагінація</li>\n                    <li>Модуль 11 - Заняття 21 - CRUD</li>\n                    <li>Модуль 11 - Заняття 22 - Синтаксис async/await</li>\n                </Scrollspy>\n            </ul>\n\n\n\n        </div>\n    );\n};\nexport default Navbar","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/M1L2.jsx",[],[],"/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/GitHub.jsx",["56"],[],"import React from \"react\";\n\nconst GitHub = () => {\n    return (\n        <object data=\"\" type=\"\">\n            <iframe src=\"https://drive.google.com/file/d/1z-Rxcqq64ZKAhZlWoqgCRWRnOeXp-QQD/preview\" width=\"100%\" height=\"1200\" allow=\"autoplay\"></iframe>\n\n        </object>\n    )\n\n}\nexport default GitHub","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Lessons/M1L1.jsx",["57","58","59","60"],[],"import React from \"react\";\nimport s from \"./Lessons.module.css\";\nimport sprite from \"../../img/icomoon/sprite.svg\";\nimport table1 from \"../../img/table1.png\";\nimport table2 from \"../../img/table2.png\";\nimport operatorTable1 from '../../img/not-strict-equality.png'\nimport operatorTable2 from '../../img/strict-equality.png'\nimport string from '../../img/string-idx.png'\nimport code1 from '../../img/code1.png'\nimport booleanOperators from '../../img/boolean-operators.png'\nimport Scrollspy from 'react-scrollspy'\n\nconst M1L1 = () => {\n    return (\n        <div className={s.lessonsBox}>\n            <div>\n                <Scrollspy items={['section-1', 'section-2', 'section-3']} currentClassName=\"is-current\" className={s.breadNav}>\n                    <li><a href=\"#section-1\">Підключення скрипту</a></li>\n                    <li><a href=\"#section-2\">Інструменти розробника</a></li>\n                    <li><a href=\"#section-3\">Основи синтаксису</a></li>\n                    <li><a href=\"#section-4\">Змінні та типи</a></li>\n\n                    <li><a href=\"#section-5\">Взаємодія з користувачем</a></li>\n\n                    <li><a href=\"#section-6\">Основні оператори</a></li>\n                    <li><a href=\"#section-7\">Числа</a></li>\n                    <li><a href=\"#section-8\">Рядки</a></li>\n                    <li><a href=\"#section-9\">Логічні оператори</a></li>\n\n                </Scrollspy>\n\n            </div>\n\n\n            <div className={s.article}>\n                <h1>Знайомство з JavaScript</h1>\n                <p>\n                    Коли ми говоримо про програмування, перше, що спадає на думку це набір\n                    інструкцій у файлі. Вихідний код (source code) - це текст комп'ютерної\n                    програми будь-якою мовою програмування, набір синтаксичних конструкцій,\n                    що легко читають, що описують набір інструкцій для комп'ютера.\n                </p>\n\n                <p>\n                    Сам собою вихідний код незрозумілий для машини. Є крок, що виконується\n                    після написання програми, який конвертує вихідний код у файлі набір\n                    інструкцій зрозумілих комп'ютеру. Цим займається спеціальна програма:\n                    компілятор чи інтерпретатор . Звідси можна дійти невтішного висновку -\n                    код пишеться задля машини, а розробника. Вихідний код повинен як\n                    правильно вирішувати завдання, а й бути зрозумілим.\n                </p>\n\n                <h3>Логічне мислення</h3>\n                <p>\n                    У світі є багато мов програмування. Вони не такі складні, як людські,\n                    тому що складаються з досить маленького набору синтаксичних конструкцій,\n                    а принцип роботи і базові концепції схожі між різними мовами.\n                </p>\n                <p>\n                    Досвідчені розробники розглядають проблеми з погляду алгоритмів - набору\n                    кроків, які потрібно виконати задля досягнення певної мети. Ми постійно\n                    використовуємо алгоритми у повсякденному житті. Наприклад, процес\n                    приготування чаю – це набір необхідних кроків (алгоритм) задля\n                    досягнення результату. Коли ви звикнете вибудовувати рішення задачі у\n                    вигляді алгоритму, мова програмування буде лише інструментом.\n                </p>\n\n                <p>\n                    <span>JavaScript</span> - реалізація специфікації EcmaScript,\n                    високорівнева мова програмування, яку підтримують всі сучасні\n                    веб-браузери. Спочатку призначений для взаємодії з елементами\n                    веб-сторінок та додавання інтерактивності.\n                </p>\n\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        JavaScript немає жодного відношення до мови Java. Це дві незалежні\n                        мови програмування.\n                    </p>\n                </div>\n\n                <p>\n                    При Front-end розробці JavaScript використовується у зв'язці з HTML та\n                    CSS для забезпечення функціональності веб-сторінки, такої як:\n                </p>\n                <ul>\n                    <li>нескладні обчислення</li>\n                    <li>перевірка та маніпуляція введеними користувачем даними</li>\n                    <li>зберігання інформації у браузері користувача</li>\n                    <li>динамічна зміна HTML-документа</li>\n                    <li>реакція на дії користувача</li>\n                    <li>створення інтерактивних елементів: галерей, графіків тощо.</li>\n                    <li>взаємодія з бекендом</li>\n                </ul>\n\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Якщо JavaScript-код пишеться для виконання в браузері (Front-end),\n                        розробник не має інструментів і доступу до файлової або операційної\n                        системи з міркувань безпеки.\n                    </p>\n                </div>\n\n                <p>На сьогоднішній день використовуючи JavaScript можна створювати:</p>\n\n                <ul>\n                    <li>веб-додатки на фреймворках React, Vue, Angular та інших</li>\n                    <li>бекенд програми на Node.js</li>\n                    <li>мобільні програми на React Native або Ionic</li>\n                    <li>десктоп програми за допомогою Electron</li>\n                    <li>мікроконтролери з Johnny-FiveіEspruino</li>\n                </ul>\n                <p>\n                    Для реалізації всіх цих можливостей необхідно добре знати синтаксис\n                    мови, його особливості та механізми, тренуватися мислити алгоритмічно та\n                    вирішувати якнайбільше практичних завдань.\n                </p>\n                <h1 id=\"section-1\">Підключення скрипту</h1>\n                <p>\n                    Щоб додати скрипт на веб-сторінку в HTML-файлі, використовується тег{\" \"}\n                    <span>script</span> , в атрибуті <span>src</span> якого вказуємо\n                    посилання на зовнішній JavaScript-файл.\n                </p>\n                <p>Щоб підключити JavaScript із зовнішнього файлу:</p>\n                <ul>\n                    <li>\n                        Створіть файл із розширенням <span>.js</span> і помістіть його в\n                        підпапку <span>js</span>.\n                    </li>\n                    <li>\n                        Потім вкажіть шлях до файлу скрипта в атрибуті <span>src</span> тега{\" \"}\n                        <span>script</span> .\n                    </li>\n                </ul>\n                <pre>\n                    {`\n              <!DOCTYPE html>\n              <html lang=\"en\">\n                  <head>\n                      <meta charset=\"UTF-8\" />\n                      <title>JavaScript is fun!</title>\n                  </head>\n\n                  <body>\n                      <!-- контент -->\n                      <script src=\"js/script.js\"></script>\n                  </body>\n              </html>\n            `}\n                </pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Розміщення JavaScript файлу в папці <span>js</span> не потрібне, але\n                        це хороша практика.\n                    </p>\n                </div>\n                <p>\n                    Якщо скрипт підключено до <span>{`<head>`}</span>, відображення сторінки\n                    зупиняється, доки скрипт не завантажиться та виконається повністю.\n                    Браузер завантажує та відображає HTML поступово. Якщо він бачить тег{\" \"}\n                    <span>{`<script>`}</span> без додаткових атрибутів, то спочатку\n                    виконується скрипт і потім обробляється решта код HTML-файлу. Тому\n                    скрипт підключають перед тегом, що закриває <span>{`<body>`}</span>,\n                    після всього вмісту, як у прикладі.\n                </p>\n\n                <h3>Підключення декількох скриптів</h3>\n                <pre>\n                    {`\n              <script src=\"js/script-1.js\"></script>\n              <script src=\"js/script-2.js\"></script>\n            `}\n                </pre>\n                <h1 id=\"section-2\">Інструменти розробника</h1>\n                <p>\n                    При написанні коду завжди будуть оповіщення та помилки, це нормально.\n                    Консоль браузера показує інформацію, пов'язану з веб-сторінкою, у тому\n                    числі повідомлення про помилки та попередження виконання JS-коду,\n                    запущеного в контексті сторінки.\n                </p>\n                <p>\n                    Наступні комбінації клавіш відкривають інструменти розробника на вкладці{\" \"}\n                    <span>Console:</span>{\" \"}\n                </p>\n                <ul>\n                    <li>\n                        Windows та Linux - <span>Ctrl</span> + <span>Shift</span> +{\" \"}\n                        <span>J</span> aбо <span>F12</span>{\" \"}\n                    </li>\n                    <li>\n                        MacOS - <span>Command</span> + <span>Option</span> +<span>J</span>{\" \"}\n                    </li>\n                </ul>\n                <h3>Додаткові матеріали</h3>\n\n                <div className={s.link}>\n                    <a\n                        target=\"_blank\"\n                        href=\"https://developer.chrome.com/docs/devtools/console/api/\"\n                    >\n                        Довідник по API консолі\n                    </a>\n                    <a\n                        target=\"_blank\"\n                        href=\"https://developer.chrome.com/docs/devtools/console/log/\"\n                    >\n                        Виведення повідомлень у консоль\n                    </a>\n                </div>\n\n                <h1 id=\"section-3\">Основи синтаксису</h1>\n                <p>\n                    При написанні коду важливо не просто знати, який символ або конструкцію\n                    можна використовувати, але в першу чергу необхідно розуміти термінологію\n                    та складові вихідного коду. У цій секції нам не важливе розуміння як що\n                    працює, ми лише познайомимося з базовою термінологією та синтаксисом.\n                </p>\n                <h3>Інструкція</h3>\n                <p>\n                    <strong>Інструкція (statement) </strong> - це пов'язаний набір слів та\n                    символів із синтаксису мови, які поєднуються щоб висловити одну ідею,\n                    одну інструкцію для машини.\n                </p>\n\n                <pre>\n                    {`\n            a = b * 2;\n            `}\n                </pre>\n                <p>\n                    Інструкції в JavaScript закінчуються крапкою з комою, яку можна\n                    порівняти з крапкою в кінці речення вашої рідної мови.\n                </p>\n                <ul>\n                    <li>\n                        {\" \"}\n                        <span>a</span> і <span>b</span> - змінні (як в рівнянні алгебри), це\n                        сховища даних, які використовує програма. Змінна складається з\n                        ідентифікатора (імені) та пов'язаного з ним значення.\n                    </li>\n                    <li>\n                        <span>2</span> - Просто число. Це називається значенням літералу\n                        (literal value), тому що не зберігається у змінній.\n                    </li>\n                    <li>\n                        <span>=</span>і <span>*</span> - оператори, що роблять дії над\n                        значеннями та змінними.\n                    </li>\n                </ul>\n                <p>\n                    Уявімо, що змінна <span>b</span> вже зберігає число <span>10</span>.\n                    Тоді ця інструкція каже машині:\n                </p>\n                <ol>\n                    <li>\n                        Піди знайди змінну з ідентифікатором <span>b</span> і запитай, яке в\n                        неї зараз значення.\n                    </li>\n                    <li>\n                        Підстав значення змінної <span>b</span>(10) у затвердження на місце{\" \"}\n                        <span>b</span>\n                    </li>\n                    <li>\n                        Виконай операцію множення <span>10</span> на <span>2</span>.\n                    </li>\n                    <li>\n                        Запиши результат обчислення вираження правої частини змінну{\" \"}\n                        <span>a</span>.\n                    </li>\n                </ol>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Завершення інструкції крапкою з комою не потрібно, проте{\" \"}\n                        <strong>рекомендується</strong> завжди її ставити. Це просте правило\n                        зробить код зрозумілішим і допоможе уникнути неочевидних помилок.\n                    </p>\n                </div>\n\n                <h3>Вираз</h3>\n                <p>\n                    Інструкції складаються з частин, як у будь-якій мові речення складаються\n                    із фраз, і ці фрази називаються виразами\n                </p>\n                <p>\n                    <strong>Вираз (expression) </strong>- посилання змінну чи значення, чи\n                    набір змінних і значень разом із операторами.\n                </p>\n                <pre>\n                    {`\n            [ [a] = [ [b] * [2] ] ]\n            `}\n                </pre>\n                <p>\n                    Інструкція з прикладу містить 5 виразів, які виділені квадратними\n                    дужками для візуалізації ( це не синтаксис мови ):\n                </p>\n                <ul>\n                    <li>\n                        <span>[2]</span>- Вираз значення літералу.\n                    </li>\n                    <li>\n                        <span>[b]</span> і <span>[a]</span>- вирази змінної, означають\n                        необхідність підставити значення змінної, але у тому разі, якщо змінна\n                        стоїть у правій частині висловлювання присвоювання.\n                    </li>\n                    <li>\n                        <span>[b * 2]</span>- арифметичний вираз множення.\n                    </li>\n                    <li>\n                        <span>[a = b * 2]</span>- Вираз привласнення. У нашому випадку вказує\n                        на необхідність обчислення правої частини виразу та привласнення\n                        результату змінної <span>a</span> у лівій частині виразу.\n                    </li>\n                </ul>\n                <p>\n                    Також є вирази виклику, порівняння і т. д. Ми не будемо зараз розглядати\n                    їх усі, нам важливо розуміти, з яких частин складається вихідний код і\n                    як правильно читати його.\n                </p>\n                <h3>Інтерфейс</h3>\n                <p>\n                    Коли ми підходимо до автомата з кавою або сідаємо за кермо автомобіля,\n                    існує певний набір елементів керування, з яким можна взаємодіяти. У\n                    програмуванні це називається інтерфейс.\n                </p>\n                <p>\n                    <strong>Інтерфейс</strong> - це набір властивостей та методів сутності,\n                    доступних для використання у вихідному коді.\n                </p>\n                <h3>Властивість</h3>\n                <p>\n                    У нас з вами є властивості: зріст, вага, колір очей, тобто якісь описові\n                    характеристики. Так само і у даних є властивості, наприклад, рядок має\n                    властивість його довжини. Синтаксис звернення до властивості дуже\n                    простий – через крапку.\n                </p>\n                <pre>\n                    {`\n           сутність.ім'я_властивості\n            `}\n                </pre>\n                <p>\n                    Для наочності звернемося до якості рядка <span>length</span>, яке\n                    містить кількість символів рядка.\n                </p>\n                <pre>\n                    {`\n           \"JavaScript is awesome\".length;\n            `}\n                </pre>\n                <h3>Метод</h3>\n                <p>\n                    Це виклик дії, наприклад , <span>присісти</span> або <span>бігати</span>\n                    , тобто якась активна операція. Так само і у даних є свої заздалегідь\n                    визначені методи, наприклад, можна додати або видалити елементи з\n                    колекції, перевести рядок у різний регістр і т. д. Синтаксис виклику\n                    методу дуже схожий на звернення до властивості, але в кінці додається\n                    пара круглих дужок.\n                </p>\n                <pre>\n                    {`\n                    сутність.ім'я_метода()\n                `}\n                </pre>\n                <p>\n                    Наприклад звернемося до методу рядка <span>toUpperCase()</span> , який\n                    зробить усі літери великими.\n                </p>\n                <pre>\n                    {`\n                    \"JavaScript is awesome\".toUpperCase();\n                `}\n                </pre>\n                <h3>Суворий режим написання коду</h3>\n                <p>\n                    Нова можливість специфікації ECMAScript 5, яка дозволяє переводити\n                    скрипт в режим повної відповідності сучасному стандарту. Це запобігає\n                    певним помилкам, таким як використання небезпечних і застарілих\n                    конструкцій.\n                </p>\n                <p>\n                    Щоб перевести скрипт у строгий режим, достатньо вказати директиву на\n                    початку js-файлу. Завжди пишіть код у строгому режимі.\n                </p>\n                <pre>\n                    {`\n                   script.js\n                   \"use strict\";\n                   // Це коментар. Далі йде весь код JS-файлу\n                `}\n                </pre>\n\n                <h1 id=\"section-4\">Змінні та типи</h1>\n                <p>\n                    Змінні використовуються для зберігання даних і складаються з\n                    ідентифікатора (імені) та області пам'яті, де зберігається їх значення.\n                    Змінну можна як коробку з назвою, у якій щось лежить (значення).\n                </p>\n                <pre>\n                    {`\n                  <ключове_слово> <ім'я_змінної> = <значення>\n                `}\n                </pre>\n                <h3>Імена зміних</h3>\n                <p>\n                    <strong>Ідентифікатор</strong> – це ім'я змінної, функції або класу.\n                    Складається з одного або кількох символів у наступному форматі.\n                </p>\n                <ul>\n                    <li>\n                        Першим символом має бути буква <span>a-z</span> або <span>A-Z</span>\n                        символ підкреслення <span>_</span> або знак долара <span>$</span>.\n                    </li>\n                    <li>\n                        Інші символи можуть бути літерами <span>a-z</span>, <span>A-Z</span>\n                        цифрами <span>0-9</span>, підкресленнями <span>_</span> та знаками\n                        долара <span>$</span> .\n                    </li>\n                    <li>\n                        Ідентифікатори чутливі до регістру. Це означає, що змінні{\" \"}\n                        <span>user</span> та <span>usEr</span>, <span>User</span> різні\n                    </li>\n                </ul>\n                <p>Ім'я змінної має бути зрозумілим.</p>\n                <pre>\n                    {`\n                 # ❌ Погано\n                 chislo\n                 korzina_tovariv\n                 profil_koristuvacha\n                 potochni_misyac\n                 \n                 # ✅ Добре\n                 number\n                 cart\n                 userProfile\n                 currentMonth\n                `}\n                </pre>\n                <p>\n                    Використання camelCase-нотації для ідентифікаторів є стандартом. Перше\n                    слово пишеться малими літерами, а кожне наступне починається з великої.\n                    Наприклад, <span>user</span>, <span>getUserData</span> ,{\" \"}\n                    <span>isActive</span>, <span>activeGuestCount</span>.\n                </p>\n                <div className={s.link}>\n                    <a target=\"_blank\" href=\"https://bookflow.ru/kak-nazyvat-peremennye/\">\n                        Як називати змінні\n                    </a>\n                    <a\n                        target=\"_blank\"\n                        href=\"https://www.freecodecamp.org/news/javascript-naming-conventions-dos-and-don-ts-99c0e2fdd78a\"\n                    >\n                        Угоди про імена змінні\n                    </a>\n                </div>\n                <h3>Ключові слова</h3>\n                <p>\n                    Є список зарезервованих ключових слів, які мають особливе значення і\n                    використовуються для певних конструкцій. Не можна використовувати\n                    ключові слова як ідентифікатори.\n                </p>\n                <div>\n                    <img src={table1} alt=\"\" />\n                    <img src={table2} alt=\"\" />\n                </div>\n                <h3>Оголошення змінних</h3>\n                <p>\n                    Оголошення змінної починається з ключового слова <span>const</span>.\n                    Така змінна має бути відразу ініціалізована значенням, після чого його\n                    не можна перевизначити.\n                </p>\n\n                <pre>\n                    {`\n                 // Змінні, об'явленні як const, обов'язково мають бути ініціалізовані\n                 // значенням під час оголошення, інакше буде помилка.\n                 const yearOfBirth = 2006;\n                 console.log(yearOfBirth); // 2006\n                 \n                 // Якщо змінну оголошено як const, перезаписати її значення не можна.\n                 // При спробі надати нове значення будеш помилка виконання скрипта.\n                 yearOfBirth = 2020; // ❌ Неправильно, буде помилка\n                `}\n                </pre>\n                <p>\n                    Для того, щоб оголосити змінну, якій у майбутньому можна буде надати\n                    нове значення, використовується ключове слово <span>let</span>.\n                </p>\n                <pre>\n                    {`\n                 // Переменным, объявленным через let, не обязательно сразу присваивать значение.\n                 let age;\n                 \n                 // Якщо змінної, оголошеної як let, спочатку не надано значення,\n                 // вона ініціалізується спеціальним значенням undefined (не визначено).\n                 console.log(age); // undefined\n                 \n                 // console.log() це метод для виведення даних у консоль браузера,\n                 // детальніше з ним познайомимося пізніше.\n                 \n                 // Якщо змінна оголошена як let, її значення можна перезаписати.\n                 age = 14;\n                 console.log(age); // 14\n                `}\n                </pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Оголошення змінної без ключового слова <span>let</span> або{\" \"}\n                        <span>const</span> призведе до помилки, якщо скрипт виконується у\n                        строгому режимі.\n                    </p>\n                </div>\n                <h3>\n                    Коли використовувати <span>const</span>, а коли <span>let</span>\n                </h3>\n                <p>\n                    Єдина відмінність <span>const</span> і <span>let</span> полягає в тому,\n                    що <span>const</span> забороняє повторне надання змінної будь-якого\n                    значення. Оголошення <span>const</span> робить код більш читаним,\n                    оскільки змінна завжди посилається на те саме значення. У разі{\" \"}\n                    <span>let</span> такої впевненості немає.\n                </p>\n                <h3>Константи, які не змінюються</h3>\n                <p>\n                    Імена <strong>КОНСТАНТ</strong> - змінних, значення яких ніколи не\n                    змінюється протягом роботи всього скрипта, зазвичай записуються у\n                    форматі <span>UPPER_SNAKE_CASE</span> .\n                </p>\n                <pre>\n                    {`\n                 // Константа, яка зберігає код кольору\n                 const COLOR_TEAL = \"#009688\";\n                 \n                 // Константа, ка зберігає повідомлення про результат авторизації\n                 const LOGIN_SUCCESS_MESSAGE = \"Вітаю! Ви успішно авторизувались\";\n                `}\n                </pre>\n                <p>\n                    Абсолютна більшість змінних - константи в іншому сенсі, вони просто не\n                    змінюють значення після присвоєння. Але при різних запусках скрипта це\n                    значення може бути різним. Імена таких змінних записують за допомогою\n                    формату <span>camelCase</span>.\n                </p>\n\n                <h3>Звернення до зміної</h3>\n                <p>Важливо розрізняти невизначені та неоголошені змінні.</p>\n                <p>\n                    <strong>Невизначена (undefined)</strong> - це змінна, яка була оголошена\n                    ключовим словом <span>let</span>, але не ініціалізована значенням. За\n                    умовчанням їй надається початкове значення <span>undefined</span>.\n                </p>\n                <pre>\n                    {`\n                 let username;\n                 console.log(username); // undefined\n                `}\n                </pre>\n                <p>\n                    <strong>Неоголошена (undeclared чи not defined)</strong> - це змінна,\n                    яка була оголошена у доступній області видимості. Спроба звернутися до\n                    придбаної до її оголошення викликає помилку. Наприклад, щоб прочитати чи\n                    змінити її значення.\n                </p>\n                <pre>\n                    {`\n                 // ❌ Неправильно, буде помилка\n                 age = 15; // ReferenceError: Cannot access 'age' before initialization\n                 console.log(age); // ReferenceError: age is not defined\n                 \n                 // Оголошення змінної age\n                 let age = 20;\n                 \n                 // ✅ Правильно, звертаємось після оголошення\n                 age = 25;\n                 console.log(age); // 25\n                `}\n                </pre>\n                <h3>Примітивні типи</h3>\n                <p>\n                    У JavaScript змінна не асоціюється з будь-яким типом даних, тип має її\n                    значення. Тобто змінна може зберігати значення різних типів.\n                </p>\n                <p>\n                    <strong>Number</strong> - цілі числа та числа з плаваючою комою\n                    (крапкою).\n                </p>\n                <pre>\n                    {`\n            const age = 20;\n            const points = 15.8;\n                `}\n                </pre>\n                <p>\n                    <strong>String</strong> - рядки, послідовність із нуля або більше\n                    символів. Рядок починається і закінчується одиночною <span>'</span>, або\n                    подвійними лапками <span>\"</span>.\n                </p>\n                <pre>\n                    {`\n           const username = \"Nik\";\n           const description = \"JavaSript для початківців\";\n                `}\n                </pre>\n\n                <p>\n                    <strong>Boolean</strong> – логічний тип даних, прапори стану. Усього два\n                    значення: true і false. Наприклад, на запитання включено світло в\n                    кімнаті можна відповісти так (true) чи ні (false).\n                </p>\n                <ul>\n                    <li>\n                        <span>true</span> - так, мабуть, істина, 1\n                    </li>\n                    <li>\n                        <span>false</span>- ні, невірно, брехня, 0\n                    </li>\n                </ul>\n                <p>\n                    <strong>null</strong> - особливе значення, яке по суті означає ничто.\n                    Використовується в тих ситуаціях, коли необхідно вказати порожнечу.\n                    Наприклад, якщо користувач ще нічого не вибрав, то можна сказати що\n                    значення <span>null</span>.\n                </p>\n                <pre>\n                    {`\n          let selectedProduct = null;\n                `}\n                </pre>\n                <p>\n                    <strong>undefined</strong> – ще одне спеціальне значення. За умовчанням,\n                    коли змінна оголошується, але з ініціалізується, її значення визначено,\n                    їй присвоюється <span>undefined</span>.\n                </p>\n                <pre>\n                    {`\n           let username;\n           console.log(username); // undefined\n                `}\n                </pre>\n                <h3>Оператор <span>typeof</span></h3>\n                <p>Використовується для отримання типу змінної. Повертає місце свого виклику тип значення змінної зазначеного після нього - рядок у якому зазначений тип.</p>\n                <pre>\n                    {`\n          let username;\n          console.log(typeof username); // \"undefined\"\n          \n          let inputValue = null;\n          console.log(typeof inputValue); // \"object\"\n          \n          const quantity = 17;\n          console.log(typeof quantity); // \"number\"\n          \n          const message = \"JavaScript is awesome!\";\n          console.log(typeof message); // \"string\"\n          \n          const isSidebarOpen = false;\n          console.log(typeof isSidebarOpen); // \"boolean\"\n                `}\n                </pre>\n                <h1 id=\"section-5\">Взаємодія з користувачем</h1>\n                <p>Розберемо базові операції введення/виводу, достатні для отримання та відображення даних від користувача, перш ніж навчимося працювати з HTML-документом.</p>\n                <h3>Виведення даних (відтворення)</h3>\n                <p>Для виведення даних є два методи: <span>console.log()</span>і <span>alert()</span>. У круглих дужках вказуємо ім'я змінної, значення якої потрібно вивести.</p>\n\n                <pre>\n                    {`\n                const message = \"JavaScript is awesome!\";\n                console.log(message); // JavaScript is awesome!\n                `}\n                </pre>\n                <p>Можна спочатку вказати якийсь описовий рядок, після чого поставити кому і вказати ім'я змінної.</p>\n                <pre>\n                    {`\n               const username = \"Nik\";\n               console.log(\"Username is \", username); // Username is Nik\n                `}\n                </pre>\n                <p>Метод <span>alert()</span> виводить модальне вікно, текст якого відповідає значенню змінної (або літералу), яку передамо в дужках.</p>\n                <pre>\n                    {`\n               const message = \"JavaScript is awesome!\";\n               alert(message);\n                `}\n                </pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        <span>console</span> і <span>alert</span> є частиною інтерфейсу <span>window</span> – глобального об'єкта, доступного під час виконання скрипту на веб-сторінці. Запис <span>window.alert()</span> надлишковий, пишемо просто <span>alert()</span> або <span>console.log()</span>. Детальніше про це говоритимемо далі в курсі.\n                    </p>\n                </div>\n                <a href=\"https://medium.com/free-code-camp/how-to-use-the-javascript-console-going-beyond-console-log-5128af9d573b\">Як використовувати <strong>console.log()</strong> </a>\n                <h3>Отримання даних</h3>\n                <p>Для отримання даних від користувача <span>prompt()</span> є <span>confirm()</span>. Це також методи з інтерфейсу  <span>window</span>. Результатом свого виконання вони повертають те, що було введено користувачем, тому результат роботи можна записати в змінну для подальшого використання.</p>\n                <p><span>confirm()</span> - Виводить модальне вікно з повідомленням, і дві кнопки, <span>Ok</span> і <span>Cancel</span>. При натисканні на <span>Ok</span> , результатом буде <span>true</span> при натисканні на <span>Cancel</span> - повертається <span>false</span>.</p>\n                <pre>\n                    {`\n               // Просимо клієнта підтвердити бронювання в готелі\n               // та зберігаємо в змінну результат роботи confirm\n               const isComing = confirm(\"Please confirm hotel reservation\");\n               console.log(isComing);\n                `}\n                </pre>\n                <p><span>prompt()</span> - Виводить модальне вікно з полем введення та кнопками <span>Ok</span> і <span>Cancel</span>. При натисканні <span></span>, результатом буде те, що ввів користувач, <span>Cancel</span> повертається <span>null</span>.</p>\n                <pre>\n                    {`\n              // Запитуємо назву готеля, в якому хотів би зупинитися клієнт\n              // та зберігаємо в змінну результат виклику prompt.\n              const hotelName = prompt(\"Please enter desired hotel name\");\n              console.log(hotelName);\n                `}\n                </pre>\n                <p>Важлива особливість <span>prompt</span> у тому, що незалежно від того, що ввів користувач, завжди повернеться рядок. Тобто якщо користувач ввів 5, то повернеться не число 5, а рядок \"5\".</p>\n                <pre>\n                    {`\n              const value = prompt(\"Please enter a number!\");\n              console.log(typeof value); // \"string\"\n              console.log(value); // \"5\"\n                `}\n                </pre>\n                <h1 id=\"section-6\">Основні оператори</h1>\n                <h3>Математичні оператори</h3>\n                <p>Призначення, функціонал та пріоритет (порядок) операцій нічим не відрізняються від шкільного курсу алгебри. Оператори повертають значення як наслідок висловлювання.</p>\n                <pre>\n                    {`\n              const x = 10;\n              const y = 5;\n              \n              // Додавання\n              console.log(x + y); // 15\n              \n              // Віднімання\n              console.log(x - y); // 5\n              \n              // Множення\n              console.log(x * y); // 50\n              \n              // Ділення\n              console.log(x / y); // 2\n              \n              // Залишок від ділення\n              console.log(x % y); // 0\n              \n              // Додавання з заміною (також є для всіх інших операторів)\n              let value = 5;\n              \n              // Аналогично запису value = value + 10;\n              value += 10;\n              console.log(value); // 15\n                `}\n                </pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Важливо запам'ятати терміни виразів. <span> + - * / %</span> називаються <strong>оператори</strong> , а те, на чому вони застосовуються – <strong>операнди</strong> .\n                    </p>\n                </div>\n                <h3>Оператори порівняння</h3>\n                <p>Використовуються для порівняння двох значень. Результатом свого виконання повертають буль- <span>true</span> або <span>false</span>, тобто «так» чи «ні».</p>\n                <ul>\n                    <li><span>{`a > b`}</span> і <span>{`a < b`}</span>- більше /менше</li>\n                    <li><span>{`a >= b`}</span> i <span>{`a <= b`}</span>- більше/менше або рівно </li>\n                    <li><span>{`a == b`}</span> - рівність</li>\n                    <li><span>{`a != b`}</span> - нерівність</li>\n                    <li><span>{`a === b`}</span> - сувора рівність</li>\n                    <li><span>{`a !== b`}</span> - сувора нерівність</li>\n                </ul>\n                <pre>\n                    {`\n             const x = 5;\n             const y = 10;\n             const z = 5;\n             \n             console.log(\"x > y:\", x > y); // false\n             console.log(\"x < y:\", x < y); // true\n             console.log(\"x < z:\", x < z); // false\n             console.log(\"x <= z:\", x <= z); // true\n             console.log(\"x === y:\", x === y); // false\n             console.log(\"x === z:\", x === z); // true\n             console.log(\"x !== y:\", x !== y); // true\n             console.log(\"x !== z:\", x !== z); // false\n                `}\n                </pre>\n                <h3>Оператори рівності</h3>\n                <p>«Нестрогі» оператори рівності<span>==</span> і <span>!=</span> виконують перетворення типів порівнюваних значень до числа, що може призвести до помилок, особливо у початківців.</p>\n                <pre>\n                    {`\n             // ❌ Погано, виконується приведення типів\n             console.log(5 == \"5\"); // true\n             console.log(5 != \"5\"); // false\n             console.log(1 == true); // true\n             console.log(1 != true); // false\n                `}\n                </pre>\n                <p>На наступній ілюстрації показано таблицю порівняння значень, використовуючи оператори нестрогої рівності.</p>\n                <img src={operatorTable1} alt=\"\" />\n                <p>Тому для перевірки рівності або нерівності двох значень використовуються тільки оператори <span>===</span> (сувора рівність) та <span>!==</span> (сувора нерівність), які не виконують наведення типів операндів.\n                </p>\n                <pre>\n                    {`\n             // ✅ Добре, приведення типів не виконується\n             console.log(5 === \"5\"); // false\n             console.log(5 === 5); // true\n             console.log(5 !== \"5\"); // true\n             console.log(5 !== 5); // false\n             console.log(1 === true); // false\n             console.log(1 !== true); // true\n                `}\n                </pre>\n                <p>У такому разі все  дорівнює лиш собі. Перед оцінкою нічого не перетворюється.</p>\n                <img src={operatorTable2} alt=\"\" />\n\n                <h1 id=\"section-7\">Числа</h1>\n                <p>Всі числа JavaScript, як цілі так і дробові, мають тип <span>Number</span> і записувати їх можна не тільки в десятковій системі числення.</p>\n                <h3>Приведення до числа</h3>\n                <p>Більшість арифметичних операцій та математичних функцій перетворять значення на число автоматично. Для того щоб зробити це явно, використовуйте функцію <span>Number(val)</span>, передаючи їй у <span>val</span> те, що треба привести до числа.</p>\n                <p>Якщо значення не може призвести до числа, результатом буде спеціальне числове значення <span>NaN (Not a Number)</span>. Аналогічним чином відбувається перетворення та інших математичних операторах і функціях.</p>\n\n                <pre>\n                    {`\n             const valueA = \"5\";\n             console.log(Number(valueA)); // 5\n             console.log(typeof Number(valueA)); // \"number\"\n             \n             const valueB = \"random string\";\n             console.log(Number(valueB)); // NaN\n             console.log(typeof Number(valueB)); // \"number\"\n                `}\n                </pre>\n                <h3>Методи та <span>Number.parseInt()</span> <span>Number.parseFloat()</span></h3>\n                <p>Перетворюють рядок символ за символом, доки це можливо. У разі виникнення помилки повертається число, яке вийшло.</p>\n                <p>Метод <span>Number.parseInt()</span> парсить з рядка ціле число.</p>\n                <pre>\n                    {`\n           console.log(Number.parseInt(\"5px\")); // 5\n           console.log(Number.parseInt(\"12qwe74\")); // 12\n           console.log(Number.parseInt(\"12.46qwe79\")); // 12\n           console.log(Number.parseInt(\"qweqwe\")); // NaN\n                `}\n                </pre>\n                <p>Метод <span>Number.parseFloat()</span> парсить з рядка ціле число.</p>\n                <pre>\n                    {`\n           console.log(Number.parseFloat(\"5px\")); // 5\n           console.log(Number.parseFloat(\"12qwe74\")); // 12\n           console.log(Number.parseFloat(\"12.46qwe79\")); // 12.46\n           console.log(Number.parseFloat(\"qweqwe\")); // NaN\n                `}\n                </pre>\n                <h3>Перевірка на число</h3>\n                <p>Для перевірки на число можна використовувати метод <span>Number.isNaN(val)</span>. Він перевіряє, чи вказане значення <span>NaN</span> чи ні. Метод відповідає питанням \"Це Not A Number?\" і повертає:</p>\n                <ul>\n                    <li><span>true</span>- якщо значення <span>val</span> це <span>NaN</span></li>\n                    <li><span>false</span>- якщо значення <span>val</span> це не<span>NaN</span></li>\n                </ul>\n                <p>Для всіх значень <span>val</span> крім <span>NaN</span> при передачі в <span>Number.isNaN(val)</span> поверне <span>false</span>. Цей метод не робить спробу перетворити <span>val</span> до числа, а просто виконує перевірку на <span>NaN</span>.</p>\n                <pre>\n                    {`\n           const validNumber = Number(\"51\"); // 51\n           console.log(Number.isNaN(validNumber)); // false\n           \n           const invalidNumber = Number(\"qweqwe\"); // NaN\n           console.log(Number.isNaN(invalidNumber)); // true\n                `}\n                </pre>\n                <h3>Додавання чисел з плаваючою крапкою</h3>\n                <p>При додаванні не цілих чисел у JavaScript та інших мовах програмування, є особливість. Якщо коротко, то <span>0.1 + 0.2</span> не одно <span>0.3</span>, результат додавання більше ніж <span>0.3</span>. Все від того, що машина рахує в двійковій системі.</p>\n                <p>Число <span>0.1</span> в двійковій системі числення - це нескінченний дріб, тому що одиниця на десять у двійковій системі не ділиться. Двійкове значення нескінченних дробів зберігається лише певного знака, тому виникає неточність. При додаванні <span>0.1</span> і <span>0.2</span>, дві неточності складаються, виходить незначна, але все ж таки помилка в обчисленнях.</p>\n                <pre>\n                    {`\n          console.log(0.1 + 0.2 === 0.3); // false\n          console.log(0.1 + 0.2); // 0.30000000000000004\n                `}\n                </pre>\n                <p>Звичайно, це не означає, що точні обчислення таких чисел неможливі. Є кілька методів вирішення цієї проблеми.</p>\n                <p>Можна зробити їх цілими, помноживши N, скласти, а потім результат розділити також на N.</p>\n                <pre>\n                    {`\n          console.log(0.17 + 0.24); // 0.41000000000000003\n          console.log((0.17 * 100 + 0.24 * 100) / 100); // 0.41\n                `}\n                </pre>\n                <p>Ще один спосіб - скласти, а результат відсікти до певного знака після коми за допомогою методу <span>toFixed()</span>.</p>\n                <pre>\n                    {`\n          console.log(0.17 + 0.24); // 0.41000000000000003\n          console.log((0.17 + 0.24).toFixed(2)); // 0.41\n                `}\n                </pre>\n\n                <h3>Клас <span>Math</span></h3>\n                <p>Один із вбудованих класів, який надає набір методів для роботи з числами. Знання всіх методів напам'ять не потрібно лише деяких, найбільш корисних.</p>\n                <pre>\n                    {`\n        // Math.floor(num) - возвращает наибольшее целое число,\n        // меньшее, либо равное указанному\n        console.log(Math.floor(1.7)); // 1\n        \n        // Math.ceil(num) - возвращает наименьшее целое число,\n        // большее, либо равное указанному числу.\n        console.log(Math.ceil(1.2)); // 2\n        \n        // Math.round(num) - возвращает значение числа,\n        // округлённое до ближайшего целого\n        console.log(Math.round(1.2)); // 1\n        console.log(Math.round(1.5)); // 2\n        \n        // Math.max(num1, num2, ...) - возвращает наибольшее число из набора\n        console.log(Math.max(20, 10, 50, 40)); // 50\n        \n        // Math.min(num1, num2, ...) - возвращает наименьшее число из набора\n        console.log(Math.min(20, 10, 50, 40)); // 10\n        \n        // Math.pow(base, exponent) - возведение в степень\n        console.log(Math.pow(2, 4)); // 16\n        \n        // Math.random() - возвращает псевдослучайное число в диапазоне [0, 1)\n        console.log(Math.random()); // случайное число между 0 и 1\n        console.log(Math.random() * (10 - 1) + 1); // псевдослучайное число от 1 до 10\n                `}\n                </pre>\n                <h1 id=\"section-8\">Рядки</h1>\n                <p><span>Рядок</span> - це індексований набір із нуля або більше символів, укладених у одинарні або подвійні лапки.</p>\n                <pre>\n                    {`\n       const username = \"Olga\";\n                `}\n                </pre>\n                <p>Важливо пам'ятати, що індексація елементів рядка починається з нуля. Наприклад у рядку <span>\"JavaScript\"</span> літера <span>\"J\"</span> стоїть на позиції з індексом <span>0</span>, а <span>\"t\"</span> йде під індексом <span>9</span>.</p>\n                <img className={s.stringImg} src={string} alt=\"\" />\n                <p>Вміст рядка не можна змінити, лише прочитати. Тобто не можна взяти якийсь символ і замінити його, як тільки рядок створено - він такий назавжди. Можна лише створити цілком новий рядок і присвоїти змінну замість старої.</p>\n                <h3>Конкатенація рядків</h3>\n                <p>Якщо застосувати оператор <span>+</span> до рядка та іншого типу даних, результатом операції «складання» буде рядок. Ця операція називається конкатенація, або складання рядків.</p>\n                <p>Під час конкатенації будь-який тип даних приводиться до рядка і зшивається з рядком, але є особливість - послідовність запису операндів.</p>\n                <p>Послідовність операцій має значення, перетворення типів відбувається лише на момент операції складання з рядком, доти діють звичні правила математики.</p>\n\n                <pre>\n                    {`\n       const message = \"Mango \" + \"is\" + \" happy\";\n       console.log(message); // Mango is happy\n                `}\n                </pre>\n\n                <p>Подивимося різний порядок операндов.</p>\n                <pre>\n                    {`\n      console.log(1 + \"2\"); // \"12\"\n      console.log(1 + \"2\" + 4); // \"124\"\n      console.log(1 + 2 + \"4\"); // \"34\"\n                `}\n                </pre>\n                <p>В останньому прикладі відбулася математична операція додавання для перших двох чисел <span>1</span> і <span>2</span>, після чого число <span>3</span> було перетворено на рядок <span>\"3\"</span> і поєднано з рядком <span>\"4\"</span>.</p>\n                <h3>Шаблонні рядки</h3>\n                <p>Шаблонні рядки це альтернатива конкатенації з зручнішим синтаксисом. Шаблонний рядок укладено у зворотні (косі) лапки замість подвійних або одинарних і може містити місцезаповнювачі, які позначаються знаком долара та фігурними дужками - <span>${`выражение`}</span>.</p>\n                <pre>\n                    {`\n//Використовуючи змінні, необхідно скласти рядок з підставленими значеннями.\nconst guestName = \"Манго\";\nconst roomNumber = 207;\nconst greeting =\n  \"Welcome \" + guestName + \", your room number is \" + roomNumber + \"!\";\nconsole.log(greeting); // \"Welcome Mango, your room number is 207!\"                `}\n                </pre>\n                <p>Складати рядки з значеннями, що підставляються, використовуючи конкатенацію дуже незручно. На допомогу приходять шаблонні рядки та інтерполяція.</p>\n                <img src={code1} alt=\"\" />\n                <h3>Властивості та методи рядків</h3>\n                <p>Кожний рядок має вбудовані властивості та методи, розглянемо деякі з них.</p>\n                <h4>Властивість <span>length</span></h4>\n                <pre>\n                    {`\n                const message = \"Welcome to Bahamas!\";\n                console.log(message.length); // 19\n                console.log(\"There is nothing impossible to him who will try\".length); // 47\n\n         `}\n                </pre>\n                <h4>Методи <span>toLowerCase()</span> <span>toUpperCase()</span></h4>\n                <p>Повертають новий рядок у відповідному регістрі, не змінюючи оригінальний рядок.</p>\n                <pre>\n                    {`\n                const message = \"Welcome to Bahamas!\";\n                console.log(message.toLowerCase()); // \"welcome to bahamas!\"\n                console.log(message.toUpperCase()); // \"WELCOME TO BAHAMAS!\"\n                console.log(message); // \"Welcome to Bahamas!\"\n\n         `}\n                </pre>\n                <p>Бувають ситуації коли всі символи в рядку необхідно перетворити на один регістр, верхній або нижній. Наприклад, при пошуку за ключовим словом, коли користувач вводить рядок <span>'saMsUng'</span>, а порівняти його треба з рядком <span>'samsung'</span> або <span>'SAMSUNG'</span>.</p>\n                <pre>\n                    {`\n               console.log(\"saMsUng\" === \"samsung\"); // false\n               console.log(\"saMsUng\" === \"SAMSUNG\"); // false\n\n            `}</pre>\n                <p>Щоб не вимагати абсолютно точного введення, можна зробити «нормалізацію» введеного користувачем рядка, тобто перетворити всі його символи у верхній або нижній регістр. Методи рядка <span>toLowerCase()</span> та <span>toUpperCase()</span> повернуть новий рядок у відповідному регістрі, не змінюючи оригінальний.</p>\n                <pre>\n                    {`\n               const BRAND_NAME = \"SAMSUNG\";\n               const userInput = \"saMsUng\";\n               const normalizedToUpperCaseInput = userInput.toUpperCase();\n               \n               console.log(userInput); // 'saMsUng'\n               console.log(userInput === BRAND_NAME); // false\n               console.log(normalizedToUpperCaseInput); // 'SAMSUNG'\n               console.log(normalizedToUpperCaseInput === BRAND_NAME); // true\n\n            `}</pre>\n\n\n                <h4>Метод <span>indexOf()</span></h4>\n                <p>Повертає позицію (індекс) на якій знаходиться перший збіг підрядка або <span>-1</span> якщо нічого не знайдено.</p>\n                <pre>\n                    {`\n               const message = \"Welcome to Bahamas!\";\n               console.log(message.indexOf(\"to\")); // 8\n               console.log(message.indexOf(\"hello\")); // -1\n\n            `}</pre>\n                <h4>Метод <span>includes()</span></h4>\n                <p>Перевіряє чи входить підрядок у рядок, повертає буль - <span>true</span> якщо входить і <span>false</span> в іншому випадку. Регістр символів у рядку та підрядку має значення, тому що наприклад буква <span>\"a\"</span> не дорівнює букві <span>\"А\"</span>.</p>\n                <pre>\n                    {`\n               const productName = \"Ремонтний дроїд\";\n\n               console.log(productName.includes(\"н\")); // true\n               console.log(productName.includes(\"Н\")); // false\n               console.log(productName.includes(\"дроїд\")); // true\n               console.log(productName.includes(\"Дроїд\")); // false\n               console.log(productName.includes(\"Ремонтний\")); // true\n               console.log(productName.includes(\"ремонтний\")); // false\n\n            `}</pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Усі методи рядків чутливі до регістру.\n                    </p>\n                </div>\n                <h5>Метод <span>endsWith()</span></h5>\n                <p>Дозволяє визначити, чи рядок закінчується символами (підрядком) зазначеними в дужках, повертаючи <span>true</span> або <span>false</span>.</p>\n                <pre>\n                    {`\n               const jsFileName = \"script.js\";\n               console.log(jsFileName.endsWith(\".js\")); // true\n               \n               const cssFileName = \"styles.css\";\n               console.log(cssFileName.endsWith(\".js\")); // false\n\n            `}</pre>\n                <h5>Методи <span>replace()</span> та <span>replaceAll()</span></h5>\n                <p>Повертають новий рядок, в якому перші (replace) або всі збіги (replaceAll) підрядки замінені на вказане значення.</p>\n                <pre>\n                    {`\n              const jsFileName = \"script.js\";\n              const minifiedJsFileName = jsFileName.replace(\".js\", \".min.js\");\n              console.log(minifiedJsFileName); // \"script.min.js\"\n              \n              const cssFileNames = \"styles.css, about.css, portfolio.css\";\n              const minifiedCssFileNames = cssFileNames.replaceAll(\".css\", \".min.css\");\n              console.log(minifiedCssFileNames); // \"styles.min.css, about.min.css, portfolio.min.css\"\n\n            `}</pre>\n                <h5>Метод <span>slice()</span></h5>\n                <p>Метод рядків <span>slice(startIndex, endIndex)</span> використовується для створення копії частини чи всього рядка. Він робить копію елементів рядка від <span>startIndex</span> і до, але не включаючи <span>endIndex</span> та повертає новий рядок, не змінюючи оригінал.</p>\n                <pre>\n                    {`\n              const productName = \"Repair droid\";\n              console.log(productName.slice(0, 4)); // \"Repa\"\n              console.log(productName.slice(3, 9)); // \"air dr\"\n              console.log(productName.slice(0, productName.length)); // \"Repair droid\"\n              console.log(productName.slice(7, productName.length)); // \"droid\"\n\n            `}</pre>\n                <h1 id=\"section-9\">Логічні опеcyjdysатори</h1>\n                <p>Логічні оператори використовуються для перевірки умов з множинними виразами, наприклад, в операціях порівняння.</p>\n                <h3>Приведення типів </h3>\n                <p>У логічних операціях здійснюється приведення типів операндів до <span>true</span> або <span>false</span>. Приведення відбувається якщо код виявлено логічний оператор.</p>\n                <p><strong>Truthy</strong> і <strong>Falsy</strong> - терміни, які використовуються для тих значень, які, в логічній операції, наводяться до <span>true</span> або <span>false</span>, хоча спочатку не були булями.</p>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        Запам'ятайте 6 помилкових (falsy) значень, що приводяться до <span>false</span> логічного перетворення: <span>0</span>, <span>NaN</span>, <span>null</span>, <span>undefined</span>, <span>порожній рядок</span> і <span>false</span>. Абсолютно все інше наводиться до true.\n                    </p>\n                </div>\n                <h3>Логічні оператори</h3>\n                <p>Є три логічні оператори, які використовуються для перевірки виконання множинних виразів.</p>\n                <img src={booleanOperators} alt=\"\" />\n                <h3>Логічне \"І\"</h3>\n                <p>Оператор <span>&&</span> приводить усі операнди до булю та повертає значення одного з них. Лівий операнд якщо його можна призвести до <span>false</span>, і правий в інших випадках.</p>\n                <pre>\n                    {`\n              вираз && вираз\n            `}</pre>\n                <p>У наступному прикладі обидві умови повернуть <span>true</span>, тому результатом всього виразу буде <span>true</span>- повернеться значення правого операнда.</p>\n                <pre>\n                    {`\n              const age = 20;\n              console.log(age > 10 && age < 30); // true && true -> true\n            `}</pre>\n                <p>Тобто логічне «І» замикається на брехні і повертає те, на чому запнулося або останній операнд.</p>\n                <pre>\n                    {`\n              console.log(1 && 5); // true && true -> 5\n              console.log(5 && 1); // true && true -> 1\n              console.log(0 && 2); // false && true -> 0\n              console.log(2 && 0); // true && false -> 0\n              console.log(\"\" && \"Mango\"); // false && true -> \"\"\n              console.log(\"Mango\" && \"\"); // true && false -> \"\"\n              console.log(\"Mango\" && \"Poly\"); // true && true -> \"Poly\"\n              console.log(\"Poly\" && \"Mango\"); // true && true -> \"Mango\"\n            `}</pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        При виконанні логічного «І», правий операнд може не обчислюватися, якщо лівий був приведений до <span>false</span>.\n                    </p>\n                </div>\n                <h3>Логічне \"АБО\"</h3>\n                <p>Оператор <span>||</span> приводить усі операнди до булю та повертає значення одного з них. Лівий операнд якщо його можна призвести до <span>true</span>, і правий в інших випадках.</p>\n                <pre>{`\n                const age = 5;\n                console.log(age < 10 || age > 30); // true || false -> true\n            \n            `}</pre>\n                <p>Тут результатом теж буде <span>true</span>, оскільки хоча б один з операндів, у цьому випадку правий, був приведений до <span>true</span>.</p>\n                <pre>{`\n                const age = 20;\n                console.log(age < 10 || age > 30); // false || false -> false\n            \n            `}</pre>\n                <p>Тобто логічне «АБО» замикається на правді і повертає те, на чому запнулося або останній операнд.</p>\n                <pre>{`\n                console.log(true || false); // true\n                console.log(false || true); // true\n                console.log(true || true); // true\n                \n                console.log(3 || false); // 3\n                console.log(false || 3); // 3\n                console.log(3 || true); // 3\n                console.log(true || 3); // true\n            \n            `}</pre>\n                <div className={s.interestBox}>\n                    <div className={s.interestHeader}>\n                        <svg className={s.textIcon}>\n                            <use href={sprite + \"#target\"}></use>\n                        </svg>\n                        <h5>ЦІКАВО</h5>\n                    </div>\n                    <p>\n                        При виконанні логічного «АБО», правий операнд може не обчислюватися, якщо лівий був приведений до <span>true</span>.\n                    </p>\n                </div>\n                <h3>Логічне \"НЕ\"</h3>\n                <p>Всі оператори, які ми розглядали до цього, були <strong>бінарними</strong> - що містять два операнди, лівий і правий. Логічне «НЕ» це <strong>унарний</strong> оператор, який виконує операцію над одним операндом праворуч.</p>\n                <pre>{`\n               !вираз\n            \n            `}</pre>\n                <p>Оператор <span>!</span> приводить операнд до булю, якщо необхідно, а потім робить інверсію – замінює його на протилежний <span>{`true -> false`}</span> або <span>{`false -> true`}</span>.</p>\n\n                <pre>{`\n               console.log(!true); // false\n               console.log(!false); // true\n               console.log(!3); // !3 -> !true -> false\n               console.log(!\"Mango\"); // !\"Mango\" -> !true -> false\n               console.log(!0); // !0 -> !false -> true\n               console.log(!\"\"); // !\"\" -> !false -> true\n               \n               const isOnline = true;\n               const isNotOnline = !isOnline; // !isOnline -> !true -> false\n            \n            `}</pre>\n\n\n\n            </div>\n\n        </div >\n    );\n};\n\nexport default M1L1;\n","/Users/macbook/Documents/Java Script/JS_Lessons/src/Components/Header/Header.jsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":5,"column":8,"nodeType":"63","messageId":"64","endLine":5,"endColumn":16},{"ruleId":"61","severity":1,"message":"65","line":3,"column":17,"nodeType":"63","messageId":"64","endLine":3,"endColumn":26},{"ruleId":"61","severity":1,"message":"66","line":5,"column":3,"nodeType":"63","messageId":"64","endLine":5,"endColumn":16},{"ruleId":"61","severity":1,"message":"67","line":8,"column":3,"nodeType":"63","messageId":"64","endLine":8,"endColumn":10},{"ruleId":"61","severity":1,"message":"68","line":9,"column":3,"nodeType":"63","messageId":"64","endLine":9,"endColumn":7},{"ruleId":"61","severity":1,"message":"69","line":10,"column":3,"nodeType":"63","messageId":"64","endLine":10,"endColumn":9},{"ruleId":"61","severity":1,"message":"70","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":16},{"ruleId":"61","severity":1,"message":"71","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":25},{"ruleId":"61","severity":1,"message":"72","line":2,"column":27,"nodeType":"63","messageId":"64","endLine":2,"endColumn":36},{"ruleId":"73","severity":1,"message":"74","line":6,"column":13,"nodeType":"75","endLine":6,"endColumn":145},{"ruleId":"76","severity":1,"message":"77","line":215,"column":21,"nodeType":"75","messageId":"78","endLine":218,"endColumn":22,"fix":"79"},{"ruleId":"76","severity":1,"message":"77","line":221,"column":21,"nodeType":"75","messageId":"78","endLine":224,"endColumn":22,"fix":"80"},{"ruleId":"76","severity":1,"message":"77","line":471,"column":21,"nodeType":"75","messageId":"78","endLine":471,"endColumn":91,"fix":"81"},{"ruleId":"76","severity":1,"message":"77","line":474,"column":21,"nodeType":"75","messageId":"78","endLine":477,"endColumn":22,"fix":"82"},"no-unused-vars","'listData' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'BrowserRouter' is defined but never used.","'NavLink' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'ReactDOM' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"83","text":"84"},{"range":"85","text":"84"},{"range":"86","text":"84"},{"range":"87","text":"84"},[10337,10337]," rel=\"noreferrer\"",[10582,10582],[21731,21731],[21986,21986]]